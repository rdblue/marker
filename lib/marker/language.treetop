#--
# Copyright 2009-2012 Ryan Blue.
# Distributed under the terms of the GNU General Public License (GPL).
# See the LICENSE file for further information on the GPL.
#++

module Marker
  grammar Language
    rule document
      rnl* markup aws <Document>
      /
      aws "" <Document>
    end

    rule markup
      h:block (ws rnl)+ r:markup <Markup>
      /
      h:block aws <Markup>
    end

    rule block
      heading
      /
      list
      /
      verbatim_area
      /
      horiz_rule
      /
      known_text_paragraph
    end

    ##### templates

    rule template
      template_start aws t:plain_phrase aws arg_delimiter ws args:arg_list aws template_end <Template>
      /
      template_start aws t:plain_phrase aws template_end <Template>
    end

    rule arg_list
      h:arg aws arg_delimiter ws r:arg_list <Arguments>
      /
      h:arg "" <Arguments>
    end

    # a plain (positional) argument or a named (name=text) argument
    #
    # there are two types of values matched here, inline and block.  inline
    # values are plain text areas that can be included in the containing
    # paragraph.  block values are things like lists and groups of paragraphs
    # that would normally be rendered as paragraphs themselves.  this
    # distinction is necessary to gracefully handle different types of uses for
    # templates.  examples:
    #
    # inline: text with a fixed-width {{tt|word}} embedded.
    # block:
    # {{ ruby |
    # def /( str )
    #   return File.join( self, str )
    # end
    # }}
    rule arg
      name:plain_phrase ws heading_toggle ws val:arg_safe_known_markup <BlockArgument>
      /
      name:plain_phrase ws heading_toggle ws val:arg_safe_known_text <InlineArgument>
      /
      val:arg_safe_known_markup "" <BlockArgument>
      /
      val:arg_safe_known_text "" <InlineArgument>
      /
      "" "" <InlineArgument>
    end

    ##### template-safe markup definitions

    # this is used to start lines with unsafe text and continue into a section
    # of markup
    rule arg_safe_known_markup
      rnl h:arg_safe_markup <Markup>
      /
      h:arg_safe_known_text_paragraph (ws rnl)+ r:arg_safe_markup <Markup>
    end

    rule arg_safe_markup
      h:arg_safe_block (ws rnl)+ r:arg_safe_markup <Markup>
      /
      h:arg_safe_block aws <Markup>
    end

    rule arg_safe_block
      arg_safe_heading
      /
      arg_safe_list
      /
      arg_safe_verbatim_area
      /
      arg_safe_horiz_rule
      /
      arg_safe_known_text_paragraph
    end

    ##### headings

    rule heading
      s:heading_toggle+ ws l:heading_enclosed_text ws e:heading_toggle+ <Heading>
    end

    rule heading_enclosed_text
      h:heading_toggle ws r:heading_enclosed_text <Phrase>
      /
      h:heading_enclosed_word ws r:heading_enclosed_text <Phrase>
      /
      h:heading_enclosed_word "" <Phrase>
    end

    rule heading_enclosed_word
      bold
      /
      italic
      /
      link
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle # allow unmatched delimiters after we have ruled out structures
      /
      italic_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    rule arg_safe_heading
      s:heading_toggle+ ws l:arg_safe_heading_enclosed_text ws e:heading_toggle+ <Heading>
    end

    rule arg_safe_heading_enclosed_text
      h:heading_toggle ws r:arg_safe_heading_enclosed_text <Phrase>
      /
      h:arg_safe_heading_enclosed_word ws r:arg_safe_heading_enclosed_text <Phrase>
      /
      h:arg_safe_heading_enclosed_word "" <Phrase>
    end

    rule arg_safe_heading_enclosed_word
      # equivalent to:
      # !(template_end / arg_delimiter) heading_enclosed_word
      bold
      /
      italic
      /
      link
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      term_delimiter
    end

    ##### general lists

    # a series of list items, so they can be coalesced
    rule list
      h:list_item ws rnl r:list <List>
      /
      h:list_item ws <List>
    end

    # for matching any list item
    rule list_item
      bulleted
      /
      numbered
      /
      indented
      /
      definition
    end

    rule bulleted
      '*' ws item:list_item <Bulleted>
      /
      '*' ws content:phrase <Bulleted>
    end

    rule numbered
      '#' ws item:list_item <Numbered>
      /
      '#' ws content:phrase <Numbered>
    end

    rule indented
      ':' ws item:list_item <Indented>
      /
      ':' ws content:phrase <Indented>
    end

    # a series of list items, so they can be coalesced
    rule arg_safe_list
      h:arg_safe_list_item ws rnl r:arg_safe_list <List>
      /
      h:arg_safe_list_item ws <List>
    end

    # for matching any list item
    rule arg_safe_list_item
      arg_safe_bulleted
      /
      arg_safe_numbered
      /
      arg_safe_indented
      /
      arg_safe_definition
    end

    rule arg_safe_bulleted
      '*' ws item:arg_safe_list_item <Bulleted>
      /
      '*' ws content:arg_safe_phrase <Bulleted>
    end

    rule arg_safe_numbered
      '#' ws item:arg_safe_list_item <Numbered>
      /
      '#' ws content:arg_safe_phrase <Numbered>
    end

    rule arg_safe_indented
      ':' ws item:arg_safe_list_item <Indented>
      /
      ':' ws content:arg_safe_phrase <Indented>
    end

    ##### definition lists

    rule definition
      ';' ws term:definition_term_phrase ws term_delimiter ws definition:phrase <Definition>
      /
      ';' ws term:phrase <Definition>
    end

    rule definition_term_phrase
      h:definition_term_word ws r:definition_term_phrase <Phrase>
      /
      h:definition_term_word "" <Phrase>
    end

    rule definition_term_word
      bold
      /
      italic
      /
      link
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
    end

    rule arg_safe_definition
      ';' ws term:arg_safe_definition_term_phrase ws term_delimiter ws definition:arg_safe_phrase <Definition>
      /
      ';' ws term:arg_safe_phrase <Definition>
    end

    rule arg_safe_definition_term_phrase
      h:arg_safe_definition_term_word ws r:arg_safe_definition_term_phrase <Phrase>
      /
      h:arg_safe_definition_term_word "" <Phrase>
    end

    rule arg_safe_definition_term_word
      arg_safe_bold
      /
      arg_safe_italic
      /
      arg_safe_link
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
    end

    ##### verbatim areas

    rule verbatim_area
      h:verbatim rnl r:verbatim_area <VerbatimArea>
      /
      h:verbatim "" <VerbatimArea>
    end

    rule verbatim
      " " v:(!"\n" .)* <Verbatim>
#      /
#      "\t" v:(!"\n" .)* <Verbatim>
    end

    rule arg_safe_verbatim_area
      h:arg_safe_verbatim rnl r:arg_safe_verbatim_area <VerbatimArea>
      /
      h:arg_safe_verbatim "" <VerbatimArea>
    end

    rule arg_safe_verbatim
      " " v:( !("\n" / arg_delimiter / template_end) .)* <Verbatim>
    end

    ##### horizontal rules

    # horizontal rules deviate from how MediaWiki does things.
    # consider this:
    #   ---- a para-
    #   graph
    # MediaWiki renders (newlines removed): <hr /><p>a para-</p><p>graph</p>
    # this renders (newlines removed): <hr /><p>a para-graph</p>

    rule horiz_rule
      "----" "-"* ws t:known_text_paragraph <HorizRule>
      /
      "----" "-"* <HorizRule>
    end

    rule arg_safe_horiz_rule
      "----" "-"* ws t:arg_safe_known_text_paragraph <HorizRule>
      /
      "----" "-"* <HorizRule>
    end

    ##### combination rules

    rule paragraph
      text "" <Paragraph>
    end

    rule arg_safe_paragraph
      arg_safe_text "" <Paragraph>
    end

    # a block of normal text, including single newlines but not a special line
    rule text
      !(heading / list / verbatim_area / horiz_rule) h:phrase ws rnl r:text <TextBlock>
      /
      !(heading / list / verbatim_area / horiz_rule) h:phrase ws <TextBlock>
    end

    # arg-safe variant
    rule arg_safe_text
      !(arg_safe_heading / arg_safe_list / arg_safe_verbatim_area / arg_safe_horiz_rule) h:arg_safe_phrase ws rnl r:arg_safe_text <TextBlock>
      /
      !(arg_safe_heading / arg_safe_list / arg_safe_verbatim_area / arg_safe_horiz_rule) h:arg_safe_phrase ws <TextBlock>
    end

    # paragraph wrapper for known text
    rule known_text_paragraph
      text:known_text "" <Paragraph>
    end

    # paragraph wrapper for arg-safe known text
    rule arg_safe_known_text_paragraph
      text:arg_safe_known_text "" <Paragraph>
    end

    # "known" text a block of text that does not require a !line check
    #
    # in other words, it is known that this block is text and not line-anchored
    #
    # for situations where text may follow structures that are normally on a
    # single line---e.g., horizontal rules--- the text should be handled like a
    # paragraph on a new line, but using the text rule will cause errors when
    # the text starts like a special line: cases like this: "---- ----".
    # Because it follows a structure without a new line, it is safe to assume
    # the text is a phrase.
    rule known_text
      h:phrase ws rnl r:text <TextBlock>
      /
      h:phrase ws <TextBlock>
    end

    rule arg_safe_known_text
      h:arg_safe_phrase ws rnl r:arg_safe_text <TextBlock>
      /
      h:arg_safe_phrase ws <TextBlock>
    end

    ##### general words and phrases

    # a phrase of words without newlines
    rule phrase
      h:word ws r:phrase <Phrase>
      /
      h:word "" <Phrase>
    end

    # words not inside any container
    rule word
      bold
      /
      italic
      /
      link
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    # a phrase of arg-safe words without newlines
    rule arg_safe_phrase
      h:arg_safe_word ws r:arg_safe_phrase <Phrase>
      /
      h:arg_safe_word "" <Phrase>
    end

    # words inside templates but not other markup
    rule arg_safe_word
      arg_safe_bold
      /
      arg_safe_italic
      /
      arg_safe_link
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      term_delimiter
    end

    ##### bold

    rule bold
      bold_toggle ws bold_enclosed_text ws bold_toggle <Bold>
    end

    rule bold_enclosed_text
      h:bold_enclosed_word ws r:bold_enclosed_text <Phrase>
      /
      h:bold_enclosed_word "" <Phrase>
    end

    # things that can be inside bold areas
    rule bold_enclosed_word
      italic
      /
      link
      /
      template
      /
      url
      /
      plain_word
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    rule arg_safe_bold
      bold_toggle ws arg_safe_bold_enclosed_text ws bold_toggle <Bold>
    end

    rule arg_safe_bold_enclosed_text
      h:arg_safe_bold_enclosed_word ws r:arg_safe_bold_enclosed_text <Phrase>
      /
      h:arg_safe_bold_enclosed_word "" <Phrase>
    end

    # things that can be inside arg-safe bold areas
    rule arg_safe_bold_enclosed_word
      arg_safe_italic
      /
      arg_safe_link
      /
      template
      /
      url
      /
      plain_word
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      term_delimiter
    end

    ##### italics

    rule italic
      italic_toggle ws italic_enclosed_text ws italic_toggle_no_lookahead <Italic>
    end

    rule italic_enclosed_text
      h:italic_enclosed_word ws r:italic_enclosed_text <Phrase>
      /
      h:italic_enclosed_word "" <Phrase>
    end

    # things that can be inside italic areas
    rule italic_enclosed_word
      bold
      /
      link
      /
      template
      /
      url
      /
      plain_word
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    rule arg_safe_italic
      italic_toggle ws arg_safe_italic_enclosed_text ws italic_toggle_no_lookahead <Italic>
    end

    rule arg_safe_italic_enclosed_text
      h:arg_safe_italic_enclosed_word ws r:arg_safe_italic_enclosed_text <Phrase>
      /
      h:arg_safe_italic_enclosed_word "" <Phrase>
    end

    # things that can be inside arg-safe italic areas
    rule arg_safe_italic_enclosed_word
      # this is equivalent to:
      # !(template_end / arg_delimiter) italic_enclosed_word
      arg_safe_bold
      /
      arg_safe_link
      /
      template
      /
      url
      /
      plain_word
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      term_delimiter
    end

    ##### links

    rule link
      internal_link
      /
      external_link
    end

    rule arg_safe_link
      arg_safe_internal_link
      /
      arg_safe_external_link
    end

    ##### internal links

    # [[ link target | link label ]]
    # * can contain white space
    # * cannot contain new lines

    rule internal_link
      internal_link_start ws t:plain_phrase ws a:arg_delimiter ws l:internal_link_enclosed_text ws internal_link_end <InternalLink>
      /
      internal_link_start ws t:plain_phrase ws a:arg_delimiter ws internal_link_end <InternalLink>
      /
      internal_link_start ws t:plain_phrase ws internal_link_end <InternalLink>
    end

    rule internal_link_enclosed_text
      h:internal_link_enclosed_word ws r:internal_link_enclosed_text <Phrase>
      /
      h:internal_link_enclosed_word "" <Phrase>
    end

    rule internal_link_enclosed_word
      bold
      /
      italic
      /
      template
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    rule arg_safe_internal_link
      internal_link_start ws t:plain_phrase ws a:arg_delimiter ws l:arg_safe_internal_link_enclosed_text ws internal_link_end <InternalLink>
      /
      internal_link_start ws t:plain_phrase ws a:arg_delimiter ws internal_link_end <InternalLink>
      /
      internal_link_start ws t:plain_phrase ws internal_link_end <InternalLink>
    end

    rule arg_safe_internal_link_enclosed_text
      h:arg_safe_internal_link_enclosed_word ws r:arg_safe_internal_link_enclosed_text <Phrase>
      /
      h:arg_safe_internal_link_enclosed_word "" <Phrase>
    end

    rule arg_safe_internal_link_enclosed_word
      # this is equivalent to:
      # !(template_end / arg_delimiter) internal_link_enclosed_word
      arg_safe_bold
      /
      arg_safe_italic
      /
      template
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      term_delimiter
    end

    ##### external links

    # [ url label ]
    # * can contain white space
    # * cannot contain new lines
    #
    # renders differently from MediaWiki:
    #   [ external [[internal]] ]
    # MediaWiki: <a href="external"></a><a href="internal">internal</a>
    # Marker:  <a href="external">[[internal]]</a>
    #
    # also use this rule to match bad internal link syntax [[ url | label ]]
    # because the rendering rules are the same

    rule external_link
#      external_link_start ws t:url rws l:external_link_enclosed_text ws external_link_end <ExternalLink>
#      /
#      external_link_start ws t:url ws external_link_end <ExternalLink>
#      /
      external_link_start ws t:implicit_url rws l:external_link_enclosed_text ws external_link_end <ExternalLink>
      /
      external_link_start ws t:implicit_url ws external_link_end <ExternalLink>
      /
      internal_link_start ws t:implicit_url ws arg_delimiter ws l:internal_link_enclosed_text ws internal_link_end <ExternalLink>
      /
      internal_link_start ws t:implicit_url rws l:internal_link_enclosed_text ws internal_link_end <ExternalLink>
      /
      internal_link_start ws t:implicit_url ws internal_link_end <ExternalLink>
    end

    rule external_link_enclosed_text
      h:external_link_enclosed_word ws r:external_link_enclosed_text <Phrase>
      /
      h:external_link_enclosed_word "" <Phrase>
    end

    rule external_link_enclosed_word
      bold
      /
      italic
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    rule arg_safe_external_link
#      external_link_start ws t:url rws l:external_link_enclosed_text ws external_link_end <ExternalLink>
#      /
#      external_link_start ws t:url ws external_link_end <ExternalLink>
#      /
      external_link_start ws t:implicit_url rws l:arg_safe_external_link_enclosed_text ws external_link_end <ExternalLink>
      /
      external_link_start ws t:implicit_url ws external_link_end <ExternalLink>
      /
      internal_link_start ws t:implicit_url ws arg_delimiter ws l:arg_safe_internal_link_enclosed_text ws internal_link_end <ExternalLink>
      /
      internal_link_start ws t:implicit_url rws l:arg_safe_internal_link_enclosed_text ws internal_link_end <ExternalLink>
      /
      internal_link_start ws t:implicit_url ws internal_link_end <ExternalLink>
    end

    rule arg_safe_external_link_enclosed_text
      h:arg_safe_external_link_enclosed_word ws r:arg_safe_external_link_enclosed_text <Phrase>
      /
      h:arg_safe_external_link_enclosed_word "" <Phrase>
    end

    rule arg_safe_external_link_enclosed_word
      # this is equivalent to:
      # !(template_end / arg_delimiter) external_link_enclosed_word
      arg_safe_bold
      /
      arg_safe_italic
      /
      template
      /
      url
      /
      plain_word
      /
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      template_start
      /
      term_delimiter
    end

    ##### plain words and phrases

    # a phrase of plain words
    rule plain_phrase
      h:plain_word ws r:plain_phrase <Phrase>
      /
      h:plain_word "" <Phrase>
    end

    # avoids using a white-list so that utf-8 characters are accepted
    #
    # matches anything other than a delimiter or whitespace
    rule plain_word
      (!delimiter [^ \t\r\n])+ <Word>
    end

    ##### delimiters

    # for matching any delimiter, typically in lookahead assertions
    rule delimiter
      bold_toggle
      /
      italic_toggle
      /
      heading_toggle
      /
      internal_link_start
      /
      internal_link_end
      /
      external_link_start
      /
      external_link_end
      /
      template_start
      /
      template_end
      /
      arg_delimiter
      /
      term_delimiter
    end

    rule bold_toggle
      "'''" <Delimiter>
    end

    rule italic_toggle
      "''" !"'" <Delimiter> # avoid matching bold toggles
    end

    rule italic_toggle_no_lookahead
      "''" <Delimiter>
    end

  #  rule fixed_toggle
  #    "||" <Delimiter>
  #  end

    rule heading_toggle
      '=' <Delimiter>
    end

    rule internal_link_start
      "[[" <Delimiter>
    end

    rule internal_link_end
      "]]" <Delimiter>
    end

    rule external_link_start
      "[" !"[" <Delimiter> # avoid matching internal link starts
    end

    rule external_link_end
      "]" !"]" <Delimiter> # avoid matching internal link ends
    end

    rule template_start
      "{{" <Delimiter>
    end

    rule template_end
      "}}" <Delimiter>
    end

    # breaks up arguments in an argument list
    # for example: {{ template | arg1 | arg2 }}
    rule arg_delimiter
      "|" !"|" <Delimiter> # avoid matching fixed-width toggles
    end

    # signals the break between a definition list term and definition
    rule term_delimiter
      ":" <Delimiter>
    end

    ##### matching URLs

    # unknown scheme URLs
    # used to match unknown-scheme URLs in URL contexts (like external links)
    rule implicit_url
      url_safe_char+ <URL>
    end

    # parses from a known scheme to the end of URL-safe characters
    # uses known schemes to parse bare URLs from text
    rule url
      scheme ":" url_safe_char+ <URL>
    end

    # pretty much straight from RFC 1738
    # additions:
    # * @, :, / are added because they are valid in some cases (not checked)
    # * %XX is allowed as a character, these are escaped characters
    # * '#' is added for HTML anchors
    rule url_safe_char
      !"]" [A-Za-z0-9$-_.+!?*'(),@:/#]
      /
      "%" xdigit xdigit
    end

    # known-good schemes that we want to recognize as URLs
    rule scheme
      "http" "s"? <Protocol>
      /
      "mailto" <Protocol>
      /
      "ftp" <Protocol>
    end

    ##### general rules

    # these really don't make sense unless there are specific run-time directives
    # that the markup user needs access to (such as __NOTOC__).  Not sure if
    # there will be any.  Also, perhaps a better strategy would be:
    # * if the line starts with "__" constant_name "__", then parse as magic
    # * send the magic word through an extensible module of some sort
    #
    # this means the magic words wouldn't require grammar changes
#    rule magic_word
#      '__' constant_name '__' #<MagicWord>
#    end
#
#    rule constant_name
#      [A-Z_]+
#    end

    rule number
      [1-9] digit* {
        def to_i
          text_value.to_i
        end
      }
      /
      "0" {
        def to_i
          0
        end
      }
    end

    # digits
    rule digit
      [0-9]
      /
      "0"
    end

    # hex digits
    rule xdigit
      [A-Fa-f0-9]
    end

    # required new lines
    # just one!
    rule rnl
      "\r\n" # windows
      /
      "\n" # linux/unix
      /
      "\r" # mac
    end

    # new lines
    rule nl
      [\r\n]*
    end

    # all white space
    rule aws
      [ \t\r\n]*
    end

    # required white space
    rule rws
      [ \t]+
    end

    # optional white space
    rule ws
      [ \t]*
    end

  end
end
